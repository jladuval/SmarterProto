{"ts":1381821596077,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var express = require('express')\n  , poweredBy = require('connect-powered-by')\n  , util = require('util');\n\nmodule.exports = function() {\n  // Warn of version mismatch between global \"lcm\" binary and local installation\n  // of Locomotive.\n  if (this.version !== require('locomotive').version) {\n    console.warn(util.format('version mismatch between local (%s) and global (%s) Locomotive module', require('locomotive').version, this.version));\n  }\n\n  // Configure application settings.  Consult the Express API Reference for a\n  // list of the available [settings](http://expressjs.com/api.html#app-settings).\n  this.set('views', __dirname + '/../../app/views');\n  this.set('view engine', 'ejs');\n\n  // Register EJS as a template engine.\n  this.engine('ejs', require('ejs').__express);\n\n  // Override default template extension.  By default, Locomotive finds\n  // templates using the `name.format.engine` convention, for example\n  // `index.html.ejs`  For some template engines, such as Jade, that find\n  // layouts using a `layout.engine` notation, this results in mixed conventions\n  // that can cuase confusion.  If this occurs, you can map an explicit\n  // extension to a format.\n  /* this.format('html', { extension: '.jade' }) */\n\n  // Register formats for content negotiation.  Using content negotiation,\n  // different formats can be served as needed by different clients.  For\n  // example, a browser is sent an HTML response, while an API client is sent a\n  // JSON or XML response.\n  /* this.format('xml', { engine: 'xmlb' }); */\n\n  // Use middleware.  Standard [Connect](http://www.senchalabs.org/connect/)\n  // middleware is built-in, with additional [third-party](https://github.com/senchalabs/connect/wiki)\n  // middleware available as separate modules.\n  this.use(poweredBy('Locomotive'));\n  this.use(express.logger());\n  this.use(express.favicon());\n  this.use(express.static(__dirname + '/../../public'));\n  this.use(express.bodyParser());\n  this.use(express.methodOverride());\n  this.use(this.router);\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":2023}]],"length":2023}
